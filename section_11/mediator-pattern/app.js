const log = console.log;

/* : Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently. */

const User = function (name) {
  // const this = Object.create(User.prototype) // - Automatically generated by intepreter when using the new keyword 
  // constructor
  this.name = name;
  this.chatroom = null;
}


// Automatically generated by intepreter when using the new keyword. User.prototype = {}; // prototype is essentially a way of adding and reusing methods for objects so this will refer to the User object itself and not the prototype object
/* methods on user object - this will refer to the user. essentially
var userMethods = {};
userMethods.send ... etc
and we add these to our constructor
user.send = userMethods.send;
this is all taken care of with the prototype.
see link below
https://www.ryanatkinson.io/javascript-instantiation-patterns/ <- very helpful*/
User.prototype = {
  send (message, to) {

    this.chatroom.send(message, this, to); // this is pertaining to the user

  },
  receive (message, from) {

    log(`${from.name} to ${this.name}: ${message}`);

  }

}

const Chatroom = function (params) {
  const users = {}; // list of users 

  return {

    register (user) {

      users[user.name] = user;
      user.chatroom = this; // refers to the current chatroom

    },

    send (message, from, to) {

      if (to) {

        // : Single user message
        to.receive(message, from);

      } else {

        // : Mass message
        for (let key in users) {

          if (users[key] !== from) {

            // send to everyone but yourself
            users[key].receive(message, from);

          }

        }

      }

    }

  };

};

const brad = new User("Brad");
const sarah = new User("Sarah");
const jeff = new User("Jeff");

const chatroom = new Chatroom();
chatroom.register(brad);
chatroom.register(sarah);
chatroom.register(jeff);

brad.send("hello jeff", jeff);
sarah.send("you rock!", brad);
jeff.send("hello everyone!");

